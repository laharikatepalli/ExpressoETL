Certainly! Below are examples of what the output might look like for each DataFrame based on hypothetical data:

1. **Joined Data (joined_data):**
   ```
   +----------------+------------------+------------------+-----------------+----------+-------------+------------+-------+--------------+------------+----------+------------------+------------+---------------+
   |transaction_id  |transaction_date  |transaction_time  |sales_outlet_id  |staff_id  |customer_id  |instore_yn  |order  |line_item_id  |product_id  |quantity  |line_item_amount  |unit_price  |promo_item_yn  |
   +----------------+------------------+------------------+-----------------+----------+-------------+------------+-------+--------------+------------+----------+------------------+------------+---------------+
   |7               |2019-04-01        |12:04:43          |3                |12        |558          |N           |1      |1             |52          |1         |2.5               |2.5         |N              |
   |11              |2019-04-01        |15:54:39          |3                |17        |781          |N           |1      |1             |27          |2         |7.0               |3.5         |N              |
   |19              |2019-04-01        |14:34:59          |3                |17        |788          |Y           |1      |1             |46          |2         |5.0               |2.5         |N              |
   ...
   +----------------+------------------+------------------+-----------------+----------+-------------+------------+-------+--------------+------------+----------+------------------+------------+---------------+
   ```

2. **Aggregated Product Sales Data (product_sales_data):**
   ```
   +----------+-------------+------------------+
   |product_id|sum(quantity)|sum(line_item_amount)|
   +----------+-------------+------------------+
   |52        |5            |12.5              |
   |27        |2            |7.0               |
   |46        |2            |5.0               |
   ...
   +----------+-------------+------------------+
   ```

3. **Filtered Data Based on a Condition (filtered_data_2):**
   ```
   +----------------+------------------+------------------+-----------------+----------+-------------+------------+-------+--------------+------------+----------+------------------+------------+---------------+
   |transaction_id  |transaction_date  |transaction_time  |sales_outlet_id  |staff_id  |customer_id  |instore_yn  |order  |line_item_id  |product_id  |quantity  |line_item_amount  |unit_price  |promo_item_yn  |
   +----------------+------------------+------------------+-----------------+----------+-------------+------------+-------+--------------+------------+----------+------------------+------------+---------------+
   |11              |2019-04-01        |15:54:39          |3                |17        |781          |N           |1      |1             |27          |2         |7.0               |3.5         |N              |
   |50              |2019-04-01        |13:03:49          |3                |12        |316          |N           |1      |1             |49          |2         |6.0               |3.0         |N              |
   ...
   +----------------+------------------+------------------+-----------------+----------+-------------+------------+-------+--------------+------------+----------+------------------+------------+---------------+
   ```

4. **Average Sales Amount per Transaction (avg_sales_amount):**
   ```
   +----------------+------------------+
   |transaction_id  |avg(line_item_amount)|
   +----------------+------------------+
   |7               |2.5               |
   |11              |7.0               |
   |19              |5.0               |
   ...
   +----------------+------------------+
   ```

These examples illustrate the expected tabular format for each DataFrame. The actual data and values will depend on the content of the MySQL tables used in the script.